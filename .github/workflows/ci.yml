name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-go-
        enableCrossOsArchive: false
    
    - name: Download dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        timeout_duration=300
        max_retries=3
        retry_count=0
        
        # Determine which timeout command to use
        if command -v gtimeout >/dev/null 2>&1; then
          TIMEOUT_CMD="gtimeout"
        elif command -v timeout >/dev/null 2>&1; then
          TIMEOUT_CMD="timeout"
        else
          TIMEOUT_CMD=""
        fi
        
        while [ $retry_count -lt $max_retries ]; do
          if [ -n "$TIMEOUT_CMD" ]; then
            if $TIMEOUT_CMD $timeout_duration go mod download; then
              echo "Dependencies downloaded successfully"
              break
            fi
          else
            # Fallback: run without timeout on systems where it's not available
            if go mod download; then
              echo "Dependencies downloaded successfully (no timeout available)"
              break
            fi
          fi
          
          retry_count=$((retry_count + 1))
          echo "Download attempt $retry_count failed, retrying..."
          if [ $retry_count -lt $max_retries ]; then
            sleep 10
          fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
          echo "Failed to download dependencies after $max_retries attempts"
          exit 1
        fi
      shell: bash
    
    - name: Download dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        $maxRetries = 3
        $retryCount = 0
        
        while ($retryCount -lt $maxRetries) {
          Write-Host "Download attempt $($retryCount + 1) of $maxRetries"
          
          try {
            $process = Start-Process -FilePath "go" -ArgumentList "mod", "download" -Wait -NoNewWindow -PassThru -RedirectStandardOutput "download_output.txt" -RedirectStandardError "download_error.txt"
            
            if ($process.ExitCode -eq 0) {
              Write-Host "Dependencies downloaded successfully"
              if (Test-Path "download_output.txt") {
                Get-Content "download_output.txt" | Write-Host
                Remove-Item "download_output.txt" -ErrorAction SilentlyContinue
              }
              if (Test-Path "download_error.txt") {
                Remove-Item "download_error.txt" -ErrorAction SilentlyContinue
              }
              exit 0
            } else {
              Write-Host "Download failed with exit code: $($process.ExitCode)"
              if (Test-Path "download_error.txt") {
                Write-Host "Error output:"
                Get-Content "download_error.txt" | Write-Host
                Remove-Item "download_error.txt" -ErrorAction SilentlyContinue
              }
              if (Test-Path "download_output.txt") {
                Remove-Item "download_output.txt" -ErrorAction SilentlyContinue
              }
            }
          }
          catch {
            Write-Host "Exception occurred: $($_.Exception.Message)"
          }
          
          $retryCount++
          if ($retryCount -lt $maxRetries) {
            Write-Host "Retrying in 10 seconds..."
            Start-Sleep -Seconds 10
          }
        }
        
        Write-Host "Failed to download dependencies after $maxRetries attempts"
        exit 1
      shell: powershell
    
    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go test -v -timeout=10m -coverprofile=coverage-${{ matrix.os }}.out ./...
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          go test -v -race -timeout=10m -coverprofile=coverage-${{ matrix.os }}.out ./...
        else
          # macOS: Run tests sequentially with coverage to avoid race condition issues
          go test -v -p 1 -timeout=15m -coverprofile=coverage-${{ matrix.os }}.out ./...
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage-${{ matrix.os }}.out
        flags: unittests
        name: codecov-umbrella

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v3
  #     with:
  #       version: latest
  #       args: --timeout=5m

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .
          exit 1
        fi

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run go vet
      run: go vet ./...

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: Install and run Gosec
  #     run: |
  #       go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  #       gosec ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Build binary
      run: go build -v .
    
    - name: Test binary execution
      run: ./reviewtask --help
      if: matrix.os != 'windows-latest'
    
    - name: Test binary execution (Windows)
      run: .\reviewtask.exe --help
      if: matrix.os == 'windows-latest'