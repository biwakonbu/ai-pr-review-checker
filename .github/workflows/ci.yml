name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go test -v -coverprofile=coverage.out ./...
        else
          go test -v -race -coverprofile=coverage.out ./...
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v3
  #     with:
  #       version: latest
  #       args: --timeout=5m

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .
          exit 1
        fi

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run go vet
      run: go vet ./...

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: Install and run Gosec
  #     run: |
  #       go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  #       gosec ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Build binary
      run: go build -v .
    
    - name: Test binary execution
      run: ./reviewtask --help
      if: matrix.os != 'windows-latest'
    
    - name: Test binary execution (Windows)
      run: .\reviewtask.exe --help
      if: matrix.os == 'windows-latest'